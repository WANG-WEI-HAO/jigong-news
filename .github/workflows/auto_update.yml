name: Update Posts and Deploy to GitHub Pages

on:
  # 1. 當 main 分支有推送時觸發（手動更新或修正後部署）
  push:
    branches:
      - main

  # 2. 定時觸發：每天台灣時間早上 6:50（UTC 時間為 22:50）
  schedule:
    - cron: '50 22 * * *'

# 設定權限：允許 workflow 寫入內容並部署 GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  update_posts_and_build:
    runs-on: ubuntu-latest
    steps:
      # 步驟 1：下載 repository 內容
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步驟 2：設定 Python 環境
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 步驟 3：安裝依賴套件
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4

      # 步驟 4：執行 Python 腳本更新資料
      - name: Run mess.py to update posts.json
        run: python mess.py

      # 步驟 4.5：先將變更加入 staging 區（避免 pull 衝突）
      - name: Stage changes before pulling
        run: git add posts.json images/

      # 步驟 4.6：拉取遠端最新 main 並 rebase（避免 push 被拒）
      - name: Pull latest changes to avoid push conflict
        run: git pull origin main --rebase

      # 步驟 5：自動 commit 並 push（若有變更）
      - name: Commit and push if content changed
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Automated: Update posts.json and images with new articles"
          file_pattern: posts.json images/*
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "actions@github.com"

      # 步驟 6：上傳產出檔案以供 GitHub Pages 使用
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

  deploy:
    needs: update_posts_and_build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
