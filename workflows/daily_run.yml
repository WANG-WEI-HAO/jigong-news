name: 每日執行 EveryPy 腳本並更新內容

on:
  schedule:
    # 在 UTC 時間 22:50 執行，這對應台灣時間 (UTC+8) 的早上 6:50
    # 這裡可以根據你實際需要調整 Cron 表達式
    - cron: '50 22 * * *' 
  workflow_dispatch: # 允許從 GitHub Actions 頁面手動觸發此流程，方便測試

jobs:
  run-and-commit:
    runs-on: ubuntu-latest
    steps:
      - name: 簽出程式碼 (Checkout repository)
        # 使用 v4 版本，它通常會自動配置好 GITHUB_TOKEN
        uses: actions/checkout@v4 
        with:
          # fetch-depth: 0 確保獲取所有歷史，以便 git diff 正確工作
          fetch-depth: 0 

      - name: 設定 Python 環境 (Set up Python)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # 保持你 EveryPy 腳本的最佳 Python 版本

      - name: 安裝依賴套件 (Install dependencies)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 執行 EveryPy 腳本 (Run EveryPy script)
        env:
          TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
          TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
          IMGBB_API_KEY: ${{ secrets.IMGBB_API_KEY }}
          CHANNEL_USERNAME: ${{ secrets.CHANNEL_USERNAME }}
          TELETHON_SESSION: ${{ secrets.TELETHON_SESSION }} 
        run: |
          echo "$TELETHON_SESSION" | base64 --decode > anon.session
          python everypy.py

      # --- START: 新增的診斷步驟 ---
      - name: 診斷：檢查 posts.json 狀態
        # 這個步驟無論腳本是否有實際變更，都會執行並打印出檔案狀態
        run: |
          echo "======== 診斷 posts.json 狀態 ========"
          echo "當前工作目錄: $(pwd)" # 打印當前工作目錄，確認路徑正確
          
          if [ -f posts.json ]; then # 檢查文件是否存在
            echo "posts.json 文件已存在。"
            ls -lh posts.json # 查看文件詳細信息 (大小, 權限)
            echo "--- posts.json 前 20 行內容 ---"
            head -n 20 posts.json # 查看文件的前 20 行內容
            echo "---------------------------------"
            
            # 檢查 Git 狀態，看文件是否被修改
            git status --short # 簡潔顯示文件狀態 (M 表示修改，A 表示添加)
            
            # 顯示工作目錄中 posts.json 與上次提交版本的差異
            echo "--- posts.json 與上次提交版本的差異 ---"
            git diff posts.json || echo "沒有工作目錄差異 (與上次提交相比)"
            echo "--------------------------------------"
            
            # 顯示暫存區中 posts.json 與上次提交版本的差異
            echo "--- 暫存區中 posts.json 與上次提交版本的差異 ---"
            git diff --staged posts.json || echo "沒有暫存區差異"
            echo "---------------------------------------------"
          else
            echo "錯誤：posts.json 文件不存在於倉庫根目錄。"
          fi
          echo "======== 診斷結束 ========"
      # --- END: 新增的診斷步驟 ---

      - name: 提交並推送 posts.json 的變更 (Commit and push changes)
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # 將 posts.json 文件添加到 Git 暫存區
          git add posts.json
          
          # 檢查是否有實際變更被暫存
          if ! git diff --staged --quiet; then
            git commit -m "每日自動更新文章 (Automated daily post update)"
            git push 
          else
            echo "沒有檢測到 'posts.json' 有變更，跳過提交。"
          fi
